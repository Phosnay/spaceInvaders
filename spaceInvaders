import pygame as pg, sys                # sys = module qui permet d'interagir avec Python (sys.exit())
import random as rdm
from classBlock import Block            # ou import classBlock 
from fonctions.defClamp import clamp
from fonctions.defMove_and_collide import move_and_collide
from fonctions.defMissile import missile

################# variables constantes ######https://github.com/Phosnay/spaceInvaders/blob/main/graph/player_pygame.png################
WIDTH, HEIGHT, FPS = 800, 800, 60       # affectation multiple pour 3 variables (Frames Per Second)
BG = (24,26,32); WCOLOR = (200,80,80)   # le point virgule permet de mettre 2 instructions sur 1 ligne, 2 variables tuple RGB
SIZE, SPEED = 36, 220                   # affectation multiple pour 2 variables
SCROLL_SPEED = 60                       # vitesse du scroll (qtt de pixels par seconde)
# --- Images --- #
IMAGE_VAISSEAU = "graph/vaisseau01.png"
IMAGE_SCROLL = "graph/scroll.png"
IMAGE_MUNITION_VAISSEAU = "graph/munition50.png"
################# initialisation des modules Pygame ######################
pg.init()
screen = pg.display.set_mode((WIDTH, HEIGHT))   # display=gère l'affichage, set_mode=une fenêtre graphique
clock = pg.time.Clock()                         # time.Clock=horloge interne
############################## vaisseau ##################################

player = pg.Rect(WIDTH//2 - SIZE//2, HEIGHT//1.1 - SIZE//2, SIZE, SIZE)   # rectangle (x, y, largeur, hauteur) au centre de la fenêtre
player_img = pg.image.load("graph/vaisseau01.png").convert_alpha()

player_img = pg.transform.scale(player_img, (SIZE, SIZE)) 

############################## laser du vaisseau ##################################
player_laser = pg.image.load("graph/munition50.png").convert_alpha()


# Chargement du background (bg)
bg_img = pg.image.load("graph/scroll.png").convert()
bg_img = pg.transform.scale(bg_img, (WIDTH, HEIGHT))
bg_height = bg_img.get_height()
bg_y = 0

# --- Murs ---
walls = []
#     pg.Rect(150, 80, 500, 24),
#     pg.Rect(150, 380, 500, 24),
#     pg.Rect(150, 80, 24, 324),
#     pg.Rect(626, 80, 24, 324),
#     pg.Rect(300, 210, 200, 24),
# ]


# --- Boucle principale ---
running = True
while running:
    dt = clock.tick(FPS) / 1000.0
    for e in pg.event.get():
        if e.type == pg.QUIT:
            running = False
    # AUTOMATIQUE

    # trouver comment lancer toutes les 1 seconde au ein du running
    # On appelle la fonction missile qui affiche les missiles
    missile(player, screen, WCOLOR,)

    # INPUT
    k = pg.key.get_pressed()
    dx = (k[pg.K_RIGHT] or k[pg.K_d]) - (k[pg.K_LEFT] or k[pg.K_q])
    dy = (k[pg.K_DOWN]  or k[pg.K_s]) - (k[pg.K_UP]   or k[pg.K_z])

    # LOGIQUE
    move_and_collide(player, dx, dy, SPEED, dt, walls)
    clamp(WIDTH, HEIGHT, player)

    # Défillement du background
    bg_y += SCROLL_SPEED * dt
    if bg_y >= bg_height:
        bg_y = 0

    # DESSIN
    screen.blit(bg_img, (0, bg_y))         
    screen.blit(bg_img, (0, bg_y - bg_height)) 

    for w in walls:
        pg.draw.rect(screen, WCOLOR, w)
    screen.blit(player_img, player.topleft) 
    pg.display.flip()

pg.quit(); sys.exit()
 