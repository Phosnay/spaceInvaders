import pygame as pg, sys
import random as rdm
# --- Config ---
WIDTH, HEIGHT, FPS = 800, 800, 60
BG = (24,26,32); WCOLOR = (200,80,80)
SIZE, SPEED = 36, 220
SCROLL_SPEED = 60  # vitesse du scroll (qtt de pixels par seconde)

pg.init()
screen = pg.display.set_mode((WIDTH, HEIGHT))
clock = pg.time.Clock()

# --- Joueur ---
player = pg.Rect(WIDTH//2 - SIZE//2, HEIGHT//1.1 - SIZE//2, SIZE, SIZE)
player
player_img = pg.image.load("C:/Users/nilsr/Documents/handigital/python/jeu/graph/player_pygame.png").convert_alpha()
player_img = pg.transform.scale(player_img, (SIZE, SIZE))

# --- laser ---
player_laser = pg.image.load("C:/Users/nilsr/Documents/handigital/python/jeu/graph/munition50.png").convert_alpha()


class Block(pg.sprite.Sprite):
    """
    This class represents the ball
    It derives from the "Sprite" class in Pygame
    """
    def __init__(self, color, width, height):
        """ Constructor. Pass in the color of the block,
        and its x and y position. """
        # Call the parent class (Sprite) constructor
        super().__init__()
 
        # Create an image of the block, and fill it with a color.
        # This could also be an image loaded from the disk.
        self.image = pg.Surface([width, height])
        self.image.fill(color)
 
        # Fetch the rectangle object that has the dimensions of the image
        # image.
        # Update the position of this object by setting the values
        # of rect.x and rect.y
        self.rect = self.image.get_rect()
 
    def reset_pos(self):
        """ Reset position to the top of the screen, at a random x location.
        Called by update() or the main program loop if there is a collision.
        """
        self.rect.y = rdm.randrange(-300, -20)
        self.rect.x = rdm.randrange(0, WIDTH)
 
    def update(self):
        """ Called each frame. """
 
        # Move block down one pixel
        self.rect.y += 1
 
        # If block is too far down, reset to top of screen.
        if self.rect.y > 410:
            self.reset_pos()
# Chargement du background (bg)
bg_img = pg.image.load("C:/Users/nilsr/Documents/handigital/python/jeu/graph/scroll.png").convert()
bg_img = pg.transform.scale(bg_img, (WIDTH, HEIGHT))
bg_height = bg_img.get_height()
bg_y = 0

# --- Murs ---
walls = []
#     pg.Rect(150, 80, 500, 24),
#     pg.Rect(150, 380, 500, 24),
#     pg.Rect(150, 80, 24, 324),
#     pg.Rect(626, 80, 24, 324),
#     pg.Rect(300, 210, 200, 24),
# ]

def clamp(r):
    r.left = max(0, r.left); r.top = max(0, r.top)
    r.right = min(WIDTH, r.right); r.bottom = min(HEIGHT, r.bottom)

def move_and_collide(r, dx, dy, speed, dt, walls):
    # X
    r.x += int(dx * speed * dt)
    for w in walls:
        if r.colliderect(w):
            if dx > 0:  r.right = w.left
            elif dx < 0: r.left  = w.right
    # Y
    r.y += int(dy * speed * dt)
    for w in walls:
        if r.colliderect(w):
            if dy > 0:  r.bottom = w.top
            elif dy < 0: r.top   = w.bottom

# --- Boucle principale ---
running = True
while running:
    dt = clock.tick(FPS) / 1000.0
    for e in pg.event.get():
        if e.type == pg.QUIT:
            running = False
    # AUTOMATIQUE
    
    # POS
    player_pos = 

    # INPUT
    k = pg.key.get_pressed()
    dx = (k[pg.K_RIGHT] or k[pg.K_d]) - (k[pg.K_LEFT] or k[pg.K_q])
    dy = (k[pg.K_DOWN]  or k[pg.K_s]) - (k[pg.K_UP]   or k[pg.K_z])

    # LOGIQUE
    move_and_collide(player, dx, dy, SPEED, dt, walls)
    clamp(player)

    # DÃ©fillement du background
    bg_y += SCROLL_SPEED * dt
    if bg_y >= bg_height:
        bg_y = 0

    # DESSIN
    screen.blit(bg_img, (0, bg_y))         
    screen.blit(bg_img, (0, bg_y - bg_height)) 

    for w in walls:
        pg.draw.rect(screen, WCOLOR, w)
    screen.blit(player_img, player.topleft) 
    pg.display.flip()

pg.quit(); sys.exit()
 